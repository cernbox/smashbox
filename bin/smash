#!/usr/bin/env python2
# -*- python -*-
#
# The _open_SmashBox Project.
#
# Author: Jakub T. Moscicki, CERN, 2013
# License: AGPL
#
#$Id: $
#
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Perform internal setup of the environment.
# This is a Copy/Paste logic which must stay in THIS file
def standardSetup():
   import sys, os.path
   # insert the path to cernafs based on the relative position of this scrip inside the service directory tree
   exeDir = os.path.abspath(os.path.normpath(os.path.dirname(sys.argv[0])))
   pythonDir = os.path.join(os.path.dirname(exeDir), 'python' )
   sys.path.insert(0, pythonDir)
   import smashbox.setup
   smashbox.setup.standardSetup(sys.argv[0]) # execute a setup hook

standardSetup()
del standardSetup
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

global_exitcode_error = False


def main():
   import os, os.path, sys
   import glob
   import datetime
   import smashbox.script
   import smashbox.no_engine
   import time
   import shutil

   parser=smashbox.script.arg_parser(description='Run the tests and smash the box')

   parser.add_argument('tests', metavar='test', type=str, nargs='*',
                      help='single test (file) or test collection (directory)')

   parser.add_argument('--keep-state', dest="keep_state",action="store_true", help='incremental test on top of existing files: keep current state of the account both locally and on the server')
   parser.add_argument('--keep-going',dest="keep_going",action="store_true",default=False,help='do not abort the execution on the first failed testcase')
   parser.add_argument('--all-testsets', '-a', dest="all_testsets", action="store_true", help='run all testsets defined within each test script file')
   parser.add_argument('--testset', '-t', dest="testset", action="store", default=None, type=int, help='run just one testset specified by index, starting from 0')
   parser.add_argument('--loop', '-l', dest="loop", action="store", default=1, type=int, help='number of times a test command should be executed')
   parser.add_argument('--drop-passed', '-d', dest="drop_passed", action="store_true", default=False, help='drop passed tests log files and keep only failed ones logs')

   args = parser.parse_args()

   config = smashbox.script.configure(args.options,args.configs)

   import logging
   logging.addLevelName(35,"SUMMARY")
   logging.SUMMARY = 35
   
   # in the --quiet mode we do not log INFO
   # use log_quiet() to log in the --quiet mode
   def log_quiet(fmt,*args, **kwds):
       logger.log(logging.SUMMARY,fmt,*args,**kwds)
   
   level = logging.WARNING # log warnings, errors and quiet messages

   if args.quiet:
       level = logging.ERROR
   elif args.verbose:
       level = logging.INFO
   elif args.debug:
       level = logging.DEBUG

   logger = smashbox.script.getLogger()
   logger.setLevel(level)

   # we will pass the loglevel to worker processes in the config
   # object (we use leading underscore for such internal stuff)
   config._loglevel = level
   
   # check for mandatory configuration 
   if not hasattr(config,'oc_account_password') or not config.oc_account_password:
      logger.error("The oc_account_password not set in smashbox.conf")
      sys.exit(1)
            
   test_mode = "single"
   tests = []

   for t in args.tests:
      if not os.path.exists(t):
         logger.critical("Test target does not exist: %s (%s)",repr(t),os.path.abspath(t))
         sys.exit(1)

      if os.path.isdir(t):
         test_mode = "collection"
         for fn in glob.glob(os.path.join(t,'test_*.py')):
            logger.info("Test target: %s",fn)
            tests.append(fn)            
      else:
         #t = os.path.abspath(t)
         tests.append(t)

   logger.info("Test mode: %s",test_mode)

   ############
   # handle specific config options

   if args.keep_state:
      config.oc_account_reset_procedure = 'keep'
      config.rundir_reset_procedure = 'keep'

   if not config.runid:
      config.runid = datetime.datetime.now().strftime("%y%m%d-%H%M%S")

   config._run_timestamp = time.time()

   config.smashdir = os.path.expanduser(config.smashdir)

   # note: specifying "localhost" may give you SSL problems
   # (authentication error reported by ocsync) so we get the real
   # hostname here
   if config.oc_server.strip() in ['localhost', '']:
       import socket
       config.oc_server = socket.gethostname()

   
   top_smash = os.path.normpath(os.path.dirname(os.path.dirname(os.path.abspath(sys.argv[0]))))

   # relative paths are resolved wrt to <top_smash> and MUST start with ./
   # absolute paths are left as-is
   # plain basename exectuable is found via PATH

   config.oc_server_tools_path = os.path.join(top_smash,config.oc_server_tools_path)

   if not config.oc_sync_cmd:
      logger.critical("config error: undefined oc_sync_cmd")
      sys.exit(1)

   if isinstance(config.oc_sync_cmd, basestring):
      config.oc_sync_cmd = config.oc_sync_cmd.split(' ')

   oc_sync_cmd_exe = config.oc_sync_cmd[0]
   oc_sync_cmd_args = config.oc_sync_cmd[1:]

   if oc_sync_cmd_exe.startswith('./') or os.path.isabs(oc_sync_cmd_exe):
      oc_sync_cmd_exe = os.path.normpath(os.path.join(top_smash,oc_sync_cmd_exe))
   else:

      if os.sep in oc_sync_cmd_exe:
         logger.error("config error: %s: relative path to oc_sync_cmd must start with ./", config.oc_sync_cmd)
         sys.exit(1)

      # just a plain base name: find executable using which
      from smashbox.utilities import which
      oc_sync_cmd_exe = which(oc_sync_cmd_exe)
      if not oc_sync_cmd_exe:
         logger.critical("config error: oc_sync_cmd not found in PATH: %s (specified as plain executable)",config.oc_sync_cmd)
         sys.exit(1)
         
   from smashbox.utilities import is_exe
   if not is_exe(oc_sync_cmd_exe):
      logger.critical("config_error: oc_sync_cmd not found %s (specified as: '%s')",oc_sync_cmd_exe,config.oc_sync_cmd)
      sys.exit(1)

   # executable is found, now append the arguments if any
      
   #config.oc_sync_cmd = " ".join([oc_sync_cmd_exe] + oc_sync_cmd_args)

   import string

   try:
      config.oc_server_shell_cmd = string.Template(config.oc_server_shell_cmd).substitute({'oc_server':config.oc_server})
   except ValueError,x:
      logger.critical('Malformed options oc_server_shell_cmd: %s %s'%(repr(config.oc_server_shell_cmd),repr(x)))
      sys.exit(1)


   try:
      config.oc_server_folder = string.Template(config.oc_server_folder).substitute({'runid':config.runid})
   except ValueError,x:
      logger.critical('Malformed options oc_server_folder: %s %s'%(repr(config.oc_server_folder),repr(x)))
      sys.exit(1)

   #
   ###########

   class Stats:
      def __init__(self):
         self.failed = self.passed = self.ignored = self.total = 0

      def add(self, returncode, ignored):
         if ignored:
            self.ignored += 1
         elif returncode != 0:
            self.failed += 1
         else:
            self.passed += 1

         self.total += 1

      def print_stats(self):
         #logger.error("IN PRINT")
         log_quiet("PASSED: %d" % self.passed)
         log_quiet("FAILED: %d" % self.failed)
         log_quiet("IGNORED: %d" % self.ignored)

   stats = Stats()

   if args.dry_run:
      log_quiet('*** DRY RUN ***')
      smashbox.script.config_log(logging.INFO,hide_password=not args.debug)

   if not tests:
      logger.warning("No tests specified to run...")
      sys.exit(1)

   def run_multiprocessing_engine(config,t,reporter):
       global global_exitcode_error
       import subprocess, pickle
       t0=datetime.datetime.now()
       cmd = [sys.executable,os.path.join(os.path.dirname(os.path.dirname(__file__)),'python/smashbox/multiprocessing_engine.py'), t, pickle.dumps(config)]
       p = subprocess.Popen(cmd)
       p.communicate()
       t1=datetime.datetime.now()
       log_quiet("Elapsed time: %ss (%s)",(t1-t0).seconds,str(t1-t0))

       assert(p.returncode is not None)

       reporter.testcase_stop(p.returncode)

       if config.get('_test_ignored', None):
          test_ignored = 1
          #logger.error('Not NONE: (%s)'%config.get('_test_ignored', None))   
       else:
          test_ignored = 0
          #logger.error('IS NONE')

       stats.add(p.returncode, test_ignored)

       if p.returncode != 0:
          if args.keep_going:
             logger.error('Non-zero exit code (%s)'%p.returncode)
             global_exitcode_error = True
          else:
             logger.fatal('Aborting run -- non-zero exit code (%d)'%p.returncode)
             sys.exit(p.returncode)
       else:
          if args.drop_passed:
             shutil.rmtree(config.rundir)

             logName = "log-" + barename(config.rundir) + ".log"
             logFile = os.path.join(config.smashdir, logName)
             os.remove(logFile)

       config._test_ignored = None


   from smashbox.utilities import  oc_webdav_url

   log_quiet('runid: %s',config.runid) # log_quiet
   log_quiet('URL: %s',oc_webdav_url(hide_password=True))  # log_quiet
   
   user_defined_oc_account_name = config.oc_account_name

   # report persistent information
   import smashbox.reporter
   reporter = smashbox.reporter.Reporter()
   reporter.smashbox_start(args,config)

   for t in tests:

      workdir = None

      def barename(t):
         return os.path.splitext(os.path.basename(t))[0]
      
      if test_mode == "single":
         pass

      def set_rundir_name(test_name, runid, loop=None, test_set=None):
         config.rundir = os.path.join(config.smashdir, barename(test_name))
         if config.workdir_runid_enabled:
            config.rundir += '-' + str(runid)
            if loop != None and args.loop > 1:
               config.rundir += '-loop' + str(loop)
            if test_set != None:
               config.rundir += '-testset' + str(test_set)

      set_rundir_name(t, config.runid)

      if not user_defined_oc_account_name:
         config.oc_account_name = barename(t)

      if config.oc_account_runid_enabled:
         config.oc_account_name += '-'+str(config.runid)


      def run_test(t,j,i):
         set_rundir_name(t, config.runid, j, i)
         
         if i is None:
            ts = None
            log_quiet('running %s in %s as %s default',t,config.rundir,config.oc_account_name) # log_quiet
         else:
            ts = smashbox.no_engine.testsets[i]
            for opt,val in zip(ts.keys(),ts.values()):
               setattr(config,opt,val)
         
            log_quiet('running %s in %s as %s testset #%s %s',t,config.rundir,config.oc_account_name,i,repr(ts)) # log_quiet

         reporter.testcase_start(barename(t),j,i,smashbox.no_engine)

         if not args.dry_run:
            run_multiprocessing_engine(config,os.path.abspath(t),reporter)

      # get introspection information from the test-case itself: all
      # symbols defined by the test-case are loaded into the namespace
      # object (no_engine)
      
      smashbox.no_engine.testsets=[]

      from smashbox.utilities import SkipTestExecutionException

      smashbox.utilities.logger = logger

      try:
         execfile(os.path.abspath(t), smashbox.no_engine.__dict__)
      except SkipTestExecutionException as test_skipped:
         print(test_skipped.message)
         continue

      # basic verification
      if args.testset and args.testset>=len(smashbox.no_engine.testsets):
         logger.critical("Wrong testset specification: %d index out of range for %s",args.testset,barename(t))
         sys.exit(1)

      j = 1
      while j <= args.loop or args.loop == 0:
         log_quiet ("Running iteration %d" % j)

         if not smashbox.no_engine.testsets:
            run_test(t,j,None)
         else:
            if args.all_testsets:
               for i in range(len(smashbox.no_engine.testsets)):
                  run_test(t,j,i)
            else:
               i = args.testset # this may be None if no testset indicated
               run_test(t,j,i)
         j=j+1

   if args.dry_run:
      log_quiet('*** DRY RUN ***')

   import smashbox.alarming
   stats.print_stats()

   if stats.failed > stats.failed/20.0 :
      smashbox.alarming.send_alarm("smashbox failure","high rate of failed tests (>20%)",logger)

   if global_exitcode_error:
      sys.exit(global_exitcode_error)

   # FIXME: add finally clause with reporter.smashbox_stop()


if __name__ == '__main__':
   main()








